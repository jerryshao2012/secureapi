#!/usr/bin/env node

/**
 * Module dependencies.
 */
// Get our config file
const config = require('../config');
// App logger framework
const logger = require('../app/logger');

// Initialize server environment
const fs = require('fs');
const serverJsonFile = './server.json';
if (!fs.existsSync(serverJsonFile)) {
    const crypto = require('crypto');
    // Elliptic Curve Diffie-Hellman (ECDH) key exchanges
    var serverKey = crypto.createECDH('secp256k1');
    serverKey.generateKeys();
    const privateKey = serverKey.getPrivateKey().toString('base64');
    const publicKey = serverKey.getPublicKey().toString('base64');
    config.elliptic = {
        privateKey: privateKey,
        publicKey: publicKey
    };

    // RSA key
    var NodeRSA = require('node-rsa');
    var rsaKeyPair = new NodeRSA({b: 1024});
    config.jwt.privateKey = rsaKeyPair.exportKey('pkcs1-private-pem');
    config.jwt.publicKey = rsaKeyPair.exportKey('pkcs1-public-pem');

    // Keep in file
    fs.writeFileSync(serverJsonFile, JSON.stringify({
        elliptic: {
            privateKey: privateKey,
            publicKey: publicKey
        },
        rsa: {
            // RSA Private Key for token
            privateKey: config.jwt.privateKey,
            // RSA Public Key for token
            publicKey: config.jwt.publicKey
        },
        secret: crypto.randomBytes(32).toString('hex')
    }));
} else {
    const serverStore = JSON.parse(fs.readFileSync(serverJsonFile));
    config.elliptic = {
        privateKey: serverStore.elliptic.privateKey,
        publicKey: serverStore.elliptic.publicKey
    };
    config.jwt.privateKey = serverStore.rsa.privateKey;
    config.jwt.publicKey = serverStore.rsa.publicKey;
    // Secret for hash
    config.secret = serverStore.secret;
}

// Provides access to your Cloud Foundry environment for more info, see: https://www.npmjs.com/package/cfenv
const cfenv = require('cfenv');
const app = require('../app');
const debug = require('debug')('secureapis:server');
const http = require('http');
// Crypto library
const crypto = require('crypto');
// Node RSA library
var NodeRSA = require('node-rsa');

// Get the app environment from Cloud Foundry
const appEnv = cfenv.getAppEnv();
// Get port from environment and store in Express.
const port = config.port;
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
// Start server on the specified port and binding host
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    // print a message when the server starts listening
    logger.info("Server starting on " + appEnv.url);
}